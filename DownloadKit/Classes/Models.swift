//
//  Models.swift
//  DownloadKit
//
//  Created by Moiz on 08/01/2019.
//  Copyright Â© 2019 Moiz Ullah. All rights reserved.
//

import Foundation

/// Default completion handler for raw data downloads
public typealias CompletionHandler = (Data?, Error?) -> Void

/// A completion handler with a reference id which can be used to reference the handler
public struct HandlerReference {
    let id: String
    let completion: CompletionHandler
}

/// The `DownloadKitTask` represents a download task created by `DownloadKit`.
/// Each download task consists of a `URLSessionTask` generated by the `URLSession` utilised by `DownloadKit`
/// and an array of `HandlerReference`s which contain the completion handlers associated to the task.
public class DownloadKitTask {
    public let task: URLSessionTask
    public var handlers = [HandlerReference]()
    
    init(sessionTask: URLSessionTask, requestID: String, completion: CompletionHandler?) {
        self.task = sessionTask
        if completion != nil {
            self.handlers.append(HandlerReference(id: requestID, completion: completion!))
        }
    }
}

/// The `RequestReference` is returned by the `DownloadKit` whenever a new request is made.
/// It serves as a refrence for the caller, which can be utilized to cancel a request.
public class RequestReference {
    public let request: URLRequest
    public let requestID: String
    
    init(request: URLRequest, requestID: String) {
        self.request = request
        self.requestID = requestID
    }
}


/// Custom Error types for `DownloadKit`
///
/// - DataNotFound: For cases where the requested data is not found
/// - CancelledByUser: For cases where the user cancels the request
public enum DownloadKitErrors: Error {
    case DataNotFound
    case CancelledByUser
    case CancelledBySystem
}
